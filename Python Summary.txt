------------- some notis --------------------

- error stop code .


------------- syntax ------------------------

print("hello python2") 

------------- data type  --------------------

# All Data in Python is Object #

[1, 2, 3, 4, 5]  list => List

(1, 2, 3, 4, 5)  tuple => Tuple

{"One": 1, "Two": 2, "Three": 3} dict => Dictionary
{"amin","faqiri","love"} => set

-------------  Variables  --------------------

name = "amin"

a, b, c = 1, 2, 3

------------- Escape Sequences Characters --------------------

# \b => Back Space
# \newline => Escape New Line + \
# \\ => Escape Back Slash
# \' => Escape Single Quotes
# \" => Escape Double Quotes
# \n => Line Feed
# \r => Carriage Return => abcdefRajae\r123456 => 123456Rajae .
# \t => Horizontal Tab
# \x.. => Character Hex Value => \x4F = O .

------------- Concatenation --------------------

all_var = var1 + " " + var2

print("amin" + 1) => Error 
print(True + 1) => 2
-----------------------------------------------------------------------------------------
--------------------------------- Indexing And Slicing  ---------------------------------
-----------------------------------------------------------------------------------------
Python Use Zero Based Indexing ( Index Start From Zero ) :

var1[start:end:step] 

var1 = "AminE" 

print(var1[0]) => "A"
print(var1[-1]) => "E"
slice part : print(var1[0:3])
print(var1[:]) => Full String .
print(var1[::2]) => Full String => AiE 


-----------------------------------------------------------------------------------------
---------------------------------------------- Strings  ---------------------------------
-----------------------------------------------------------------------------------------


myStringOne = 'Single'  Or "Double "

Multi line string : ''' ''' or """ """

myStringFive = '''First
Second 'Test' "Test" ////
Third'''

-----------------------------------------------------------------------------------------
---------------------------------------------- Strings Methods  -------------------------
-----------------------------------------------------------------------------------------
# len(var) => number character .
# strip() lstrip() rstrip() => remove spacing or special character from first or last or both .
# title() => first character and after number charcter is Capitalise .
# capitalize()
# upper()
# lower()
# zfill => add zero to string number "5".zfill(2) => 05 

# split(seperatore,max-splite) rsplit() => change to list 
# center() => "amin".center(10,"@") => @@@amin@@@
# count("char",star,end) => count number of specifice character
# swapcase() => Convert uppercase characters to lowercase and lowercase characters to uppercase.
# startswith() => check if string start with specifique string 
# endswith() => check if string End with specifique string 

# index(SubString, Start, End) => return index of 'string' : returen error
# find(SubString, Start, End) => like index method : returen -1 if error
# rjust(Width, Fill Char) ljust(Width, Fill Char) => add char in string : #######amin or amin#########
# splitlines() => returen list : [line1 , line2 ,line3]
# expandtabs(int) => grow size of tab
# replace(Old Value, New Value, Count)
# join(Iterable) => change list to string with seperatore

### condition :

# istitle() 
# isspace()
# islower()
# isupper()	
# isalnum()	=> just integer number .
# isalpha()	
# isdecimal() => double number
# isnumeric() => not include 0,5 or -1 
isidentifier() => check if this string is can to indentfire Variable .

-----------------------------------------------------
------------- Strings Formatting --------------------
-----------------------------------------------------

# need to concat difrent type of data in one outpute .
-------------
---- Old Ways :
-------------

# %s => String => controle number of character .
# %d => Number
# %f => Float , %.2f => 1.00 
ex : print("My Name is: %s and My Age is: %d and My Rank is: %f" % (name, age, rank))
-------------
---- New Ways :
-------------

{}-{:.5s}-{:d}-{:.2f} {:_} : .format(value,value....)

ex : 
print("My Name is: {:s} Age: {:d} & Rank is: {:f}".format(name, age, rank))

# Format Money :
{:,d} => 1,222,125,211

# ReArrange Items :
print("letter : {3:s} {2:d} {1:.2f} {0}".format("D", 25, 1.00, "A"))

# Format in Version 3.6+

print(f"My Name is : {Variable1} and My Age is : {Variable2}")

-------------------------------------------
------------- Numbers  --------------------
-------------------------------------------


# int :
1 , 10 , 100 , -10 
-------
# Float :
-1,02 , 100,00 ,-100,25 
-------
# Complex number type :
-------------------------
----| EX: (5 + 10j) |----
-------------------------
# [1] You Can Convert From Int To Float or Complex
# [2] You Can Convert From Float To Int or Complex
# [3] You Cannot Convert Complex To Any Type

(5 + 10j).real => 5
(5 + 10j).img => 10

number Method :

int(5.25) => 5 
float(5) => 5.00
Complex(5) => 5+0j
int(5+6j) => error
float(5+6j) => error

--------------------------------------------------------
------------- Arithmetic Operators  --------------------
--------------------------------------------------------
# [+] Addition
# [-] Subtraction
# [*] Multiplication
# [/] Division => float
# [%] Modulus
# [**] Exponent
# [//] Floor Division 
# --------------------------
[//] : return devision of near posible number .

8 // 2 => 4
9 // 2 => 4


--------------------------------------------------------
-------------------   Lists   --------------------------
--------------------------------------------------------

# -----------
# [1] List Items Are Enclosed in Square Brackets []
# [2] List Are Ordered, To Use Index To Access Item : array[index]
# [3] List Are Mutable => Add, Delete, Edit .
# [4] List Items Is Not Unique
# [5] List Can Have Different Data Types
# -----------------------------

myList = ["One", "Two", "One", 1, 100.5, True]

print(myList[0])  => "One"  
print(myList[-1]) => True 
print(myList[0:2:1]) =>  ["One", "Two", "One"]
-----------
change value :
-----------
myList[0] = "Amin' 
myList[:2] = ["amin","Love",1,True]
------------
remove :
------------
myList[0] = []
myList[:2] = []

---------------------
---- list Method ----
---------------------
# append("element"or []) 
# extend("element" or []) => add element after divisi list
# remove("element") => remove first element you find
# sort() : optional arg =>  reverse = false ,key = function
# reverse() 
# clear()
# copy() 
# count('element') => count of element
# index()
# insert(index,object) => add object before index.
# pop(index) => remove item and return item 

---------------------------------------------------------
-------------------   Tuples   --------------------------
---------------------------------------------------------
# [1] Tuple Items Are Enclosed in Parentheses :         myTuple1 = (1,"amin",true) 
# [2] You Can Remove The Parentheses () If You Want :      myTuple1 = 1,"amin",true
# [3] Tuple Are Ordered, To Use Index To Access Item :  myTuple1[0]
# [4] Tuple Are Immutable => You Cant Add or Delete  :  myTuple1[0] = 5 => Error
# [5] Tuple Items Is Not Unique
# [6] Tuple Can Have Different Data Types
# [7] Operators Used in Strings and Lists Available In Tuples
---------------------------------------------------------
# count()
# index()
--------------------------------------
- # Tuple, List, String Repeat (*) : -
- "str" * 5                          -
--------------------------------------
syntx : 
-------
myTuple1 = (1,"amin",true) 
------------
# Tuple with One element ;
-----------
myTuple1 = "amin",
myTuple2 = ("amin",)
----------
concat :
----------
print(a + b) => [1, 2, 3, 4, 5, 6, 7,"a", "b", "c", "d"] .

------------------
# Tuple Destruct ' _ to ignore' :
------------------

tuplex = ("amin","kloiu",4,"typing")

a,b,_,d = tuplex


---------------------------------------------------------
-------------------    set     --------------------------
---------------------------------------------------------
# [1] Set Items Are Enclosed in Curly Braces {}
# [2] Set Items Are Not Ordered And Not Indexed 
# [3] Set Indexing and Slicing Cant Be Done
# [4] Set Has Only Immutable Data Types (Numbers, Strings, Tuples) - List and Dict Are Not
# [5] Set Items Is Unique : {1,2,3,1} => {1,2,3} 
# -------------------------------------------------------
# clear()
# union() : set1.union(set2,set3,set4) => newset OR (set1 | set2) => newset
# add()   
# copy()
# remove()
# discard() : Like remove() but not return Error
# pop() => remove random item and return this item .
# update() : update this set .

# difference() or (set1 - set2 ) : returen element in set1 and not found in set2 and return us new set . 
# difference_update()   : Remove all elements of another set from this set.
# intersection() or (set1 & set2 )       : Return the same value of two sets as a new set.
# intersection_update() : Update a set with the intersection of itself and another.
# symmetric_difference()  or (set1 ^ set2 ) : item not in set1 and not in set2 as a new set.
# symmetric_difference_update()

# issuperset()
# issubset()
# isdisjoint()

---------------------------------------------------------
-------------------    Dict     --------------------------
---------------------------------------------------------
# ----------------
# [1] Dict Items Are Enclosed in Curly Braces
# [2] Dict Items Are Contains Key : Value
# [3] Dict Key Need To Be Immutable => (Number, String, Tuple) List Not Allowed
# [4] Dict Value Can Have Any Data Types
# [5] Dict Key Need To Be Unique
# [6] Dict Is Not Ordered You Access Its Element With Key
# ----------------------------

Mydic = {
    "name" : "Amin" ,
    "Carer" : "Data Analytist",
    "baby": {
        "boy": "mohamed",
        'girl': "firdouss"
    }
}
add new item to dic :
---------------------
Mydic["key"] = value 

get element:
------------
Mydic["name"] Or Mydic.get("name") => Amin

edite item :
------------
user["name"] = "Rajae"

get all keys and all values :
-----------------------------
Mydic.keys()
Mydic.values()

Dictionary From Variable :
--------------------------
myvarDic = {
    "key1" : var1,
    "Key2" : var2,
    "key2" : var3
}

# ------------------------
# -- Dictionary Methods --
# ------------------------

# clear()
# update() : Mydic.update({"key":"value"}) : Add item to dic
# copy()
# keys() + values()
# setdefault() :return value and add item if not found in dic , if not add value return None if not found key
# popitem() : return last item and remove
# items()   : return all dic as tuple into list and return with all changes
# fromkeys() : dict.fromkeys(Iterable,object)
# ------------------------


---------------------------------------------------------
-------------------   Boolean  --------------------------
---------------------------------------------------------

# True Values
-------------
print(bool("Osama"))
print(bool(100))
print(bool(100.95))
print(bool(True))
print(bool([1, 2, 3, 4, 5]))

# False Values
--------------
print(bool(0))
print(bool(""))
print(bool(''))
print(bool([]))
print(bool(False))
print(bool(()))
print(bool({}))
print(bool(None))

# -----------------------
# -- Boolean Operators --
# -----------------------
# and
# or
# not : write before condition
# -----------------------
# --------------------------
# -- Assignment Operators --
# --------------------------
# =
# +=
# -=
# *=
# /=
# **=
# %=
# //=
# --------------------------
# -- Comparison Operators --
# --------------------------
# [ == ] Equal
# [ != ] Not Equal
# [ > ] Greater Than
# [ < ] Less Than
# [ >= ] Greater Than Or Equal
# [ <= ] Less Than Or Equal
# --------------------------
# ---------------------
# -- Type Conversion --
# ----------------------
# str()
# tuple()
# list()
# set()
# dict() : need this EX : [["x",1],["y",2]]

-----------------------------------------------------------------------------------------
---------------------------------- User Input  ------------------------------------------
-----------------------------------------------------------------------------------------
-- # code waite user to write inpute and continu code  ----------------------------------
-----------------------------------------------------------------------------------------
syntax :
--------
fName = input('Whats Is Your First Name?')

-----------------------------------------------------------------------------------------
---------------------------------- Control Flow -----------------------------------------
-----------------------------------------------------------------------------------------

# -- If, Elif, Else -- 

if condition :  
    code
Elif condition :
    code
else :
    code

# ----------------------------------
# -- Ternary Conditional Operator --
# ----------------------------------

code if condition else code 
Ex :
----
print("Movie S Not Good 4U" if age < movieRate else "Movie S Good 4U And Happy Watching")
----
-----------------------------------------------------------------------------------------
---------------------------------- Membership Operators ---------------------------------
-----------------------------------------------------------------------------------------
# --------------------------
# in
# not in
# --------------------------
name = "Osama"
print("s" in name) => True
print("a" in name) => True
print("A" in name) => False

-----------------------------------------------------------------------------------------
--------------------------------------------- Loop --------------------------------------
-----------------------------------------------------------------------------------------
# -------------------
# -- Loop => While --
# -------------------
# while condition_is_true
#   Code 
# -----------------------
while a < 10 :
    print(a)
    a += 1
else : code  # optinale run if condetion is false


# -----------------
# -- Loop => For --
# -----------------
# for item in iterable_object :
#   Do Something With Item
# -----------------------------
# -----------------------------
# item Is A Vairable You Create and Call Whenever You Want
# item refer to the current position and will run and visit all items to the end
# iterable_object => Sequence [ list, tuples, set, dict, string of charcaters, etc ... ]
# ---------------------------------------------------------------
# ---------------------------------------------------------------

for i in list :
    print(list[i])
else : print("end loop")
# ---------------------------
# -- Break, Continue, Pass --
# ---------------------------

Pass : for pass the code not complate or empty and you dont want to remove . 

# ------------------------------
# -- Advanced Dictionary Loop --
# ------------------------------

for k, v in myUltimateSkills.items():

    print(f'{k} :')
    for kk, vv in v.items():
        print(f"- {kk.lower()} => {vv}")



-----------------------------------------------------------------------------------------
------------------------------------ Function And Return --------------------------------
-----------------------------------------------------------------------------------------

def function_name():

  return "Hello Python From Inside Function"

dataFromFunction = function_name() 

print(dataFromFunction)

# -------------------------------------------------
# -- Function Packing, Unpacking Arguments *Args --
# -------------------------------------------------

[1,2,3,4,5,2,3] to Unpack => *[[1,2,3,4,5,2,3]] => 1, 2, 3, 4, 5, 2, 3 :

####################################
####### add multiarg arg ###########
####################################

def hello(arg,*argslist) :
    for i in argslist :
        print("Hello {arg} => {i}")


####################################
####### Default Parameters #########
####################################

def say_Hello(name="Rajae", age = "Unckone"):

    print(f"hello {name}")

# ----------------------------------------------------
# -- Function Packing, Unpacking Arguments **KWArgs --
# ----------------------------------------------------
# this Unpacking for dict 
# ----------------------------------------------------

def show_skills(**skills) :  => **skills == Dictionary

  print(type(skills))

  for skill, value in skills.items():

    print(f"{skill} => {value}")

show_skills(a = "80%" , b = "70%" )
or 
show_skills(**Dictionary)

# --------------------
# -- Function Scope --
# --------------------
# global Variable
# --------------------

x = 1  # Global Scope

def one():

  global x

  x = 2

# ------------------------
# -- Function Recursion --
# ------------------------

--------------
 -- Exemple --
--------------
def cleanWord(word):

  if len(word) == 1:

    return word

  print(f"Print Start Function {word}")

  if word[0] == word[1]:

    print(f"Print Before Condition {word}")

    return cleanWord(word[1:])

  print(f"Print Before Return {word}")

  return word[0] + cleanWord(word[1:])

  # Stash [ World ]

print(cleanWord("WWWoooorrrldd"))

# ------------------------
# -- Function => lambda --
# -- Anonymous Function --
# ------------------------
# [1] It Has No Name
# [2] You Can Call It Inline Without Defining It
# [3] You Can Use It In Return Data From Another Function
# [4] Lambda Used For Simple Functions and Def Handle The Large Tasks
# [5] Lambda is One Single Expression not Block Of Code
# [6] Lambda Type is Function
# -------------------------------------------------------------------

syntax :

VariableName = lambda param1, param2 : return "Hello My {param1} and {param2}"

----------------------------------------------------------------------------
--------------------------------- Modules  ---------------------------------
----------------------------------------------------------------------------
# ---------------------------------
# -- Modules => Built In Modules --
# ---------------------------------
# [1] Module is A File Contain A Set Of Functions
# [2] You Can Import Module in Your App To Help You
# [3] You Can Import Multiple Modules
# [4] You Can Create Your Own Modules
# [5] Modules Saves Your Time
# --------------------------------------------------

# Show All Functions Inside Module :
print(dir(random))

# Import One Or Two Functions From Module :
from random import randint, random, ...

# -----------------------------------
# -- Modules => Create Your Module --
# -----------------------------------

create file.py and add some function 
and : import file 

# Alias

import File as fl
from file import SayLove as slv

# ------------------------------------------
# -- Modules => Install External Packages --
# ------------------------------------------
# [1] Module vs Package
# [2] External Packages Downloaded From The Internet
# [3] You Can Install Packages With Python Package Manager PIP
# [4] PIP Install the Package and Its Dependencies
# [5] Modules List "https://docs.python.org/3/py-modindex.html"
# [6] Packages and Modules Directory "https://pypi.org/"
# [7] PIP Manual "https://pip.pypa.io/en/stable/reference/pip_install/"
# ---------------------------------------------------------------------

# comond line :
# pip install packegeName pack2 ... 

# -------------------
# -- File Handling --
# -------------------
# "r" Read    [Default Value] Open File For Read and Give Error If File is Not Exists
# "x" Create  Create File, Give Error If File Exists
# "a" Append  Open File For Appending Values, Create File If Not Exists
# "w" Write   Open File For Writing, Create File If Not Exists, clear file befor write
# --------------------------------------------------

file = open(r"D:\Python\Files\nfiles\osama.txt","tex-tMode : r, x, a, w") # r in first text is to egnore scape seqence .

----------------------------------------------------
# --------------------------------
# -- File Handling => Read File --
# ------------- r ----------------
# --------------------------------

# -----------------
# read(x)
# readline(x)
# readlines(x)
# close()
# -----------------

# -----------------------------------------------
# -- File Handling => Write and Append In File --
# -----------------------------------------------

# write(str) 
# writelines(list)
# truncate(x) : إبقاء عدد حروف محدد و الحدف الباقي كله
# tell() : position of curser 
# seek(x) : change position ocurser to read file from speciale position 

----------------------------------------------------------------------------
--------------------------------- Built In Functions  ----------------------
----------------------------------------------------------------------------

# ------------------------
# all() : return true if all object is true
# any() : return true if just one or more is true
# bin(int)  :Return the binary representation of an integer.
# id()
# sum(Iterable,start)  : start is number to add in this is sum 
# round() : round(5.500) => 6 | round(5.50,2) => 6.50
# range(start,end,step) : => list(start,end) => [start,.....,End - 1]
# print() => par : sep ,end
# abs() : القيمة المطلقة وهي المسافة بين الرقم والصفر ودائما موجبة 
# pow() : pow(2,3,5) : 2 ** 3 % 5
# min() : return minimal number
# max() : return max number
# slice(start,stop,step) : slice(stop)
# ------------------------

# -------------------------------
# -- Built In Functions => Map --
# -------------------------------
# [1] Map Take A Function + Iterator
# [2] Map Called Map Because It Map The Function On Every Element
# [3] The Function Can Be Pre-Defined Function or Lambda Function
# ---------------------------------------------------------------
# map(function,Iterable)
#######
# Ex :#
#######
  myLover = ["Zineb", "Rajae", "Salwa", "Ibtissam", "Lamiae"]

  love = map((lambda name: f"I Love You {name}"), myLover)

  for i in love:
      print(i)
  
# ----------------------------------
# -- Built In Functions => Filter --
# ----------------------------------
# [1] Filter Take A Function + Iterator
# [2] Filter Run A Function On Every Element
# [3] The Function Can Be Pre-Defined Function or Lambda Function
# [4] Filter Out All Elements For Which The Function Return True
# [5] The Function Need To Return Boolean Value
# ---------------------------------------------------------------
# Filter(Function,iterable)
#######
# Ex :#
#######

myLover = ["Zineb", "Rajae", "Salwa", "Ibtissam", "Lamiae"]

def checkLove(name):
    return len(name) > 5

# filt = filter(checkLove, myLover)

or :

filt = filter((lambda name: len(name) > 5), myLover)

for love in filt:
    print(love)

# ----------------------------------
# -- Built In Functions => Reduce --
# ----------------------------------
# [1] Reduce Take A Function + Iterator
# [2] Reduce Run A Function On FIrst and Second Element And Give Result
# [3] Then Run Function On Result And Third Element
# [4] Then Run Function On Rsult And Fourth Element And So On
# [5] Till One ELement is Left And This is The Result of The Reduce
# [6] The Function Can Be Pre-Defined Function or Lambda Function
# ---------------------------------------------------------------
# Result = reduce(function,sequence,initial)
#######
# Ex :#
#######
from functools import reduce

myLover = ["Zineb", "Rajae", "Salwa", "Ibtissam", "Lamiae"]

def concat(str1, str2):
    return str1 + " - " + str2

Result = reduce(concat, myLover, "Amin Love")

print(Result)

# ------------------------
# -- Built In Functions --
# ------------------------
# enumerate() : type => <class 'enumerate'>
# help()
# reversed() : reverse iterable , type : 
# ------------------------
###################################
#### enumerate(iterable, start) ###
###################################

myLover = ["Zineb", "Rajae", "Salwa", "Ibtissam", "Lamiae"]

orderlist = enumerate(myLover, 50)

for num, name in orderlist:
    print(f"{num} => {name}")



----------------------------------------------------------------------------
--------------------------------- Date Time  -------------------------------
----------------------------------------------------------------------------

# -----------------------------------
# -- Date and Time => Introduction --
# -----------------------------------
#
# import datetime
# Print The Current Date and Time
print(datetime.datetime.now())
print(datetime.datetime.now().year)
print(datetime.datetime.now().month)
print(datetime.datetime.now().day)

# Print Start and End Of Date
print(datetime.datetime.min)
print(datetime.datetime.max)

# Print The Current Time
print(datetime.datetime.now().time())
print(datetime.datetime.now().time().hour)
print(datetime.datetime.now().time().minute)
print(datetime.datetime.now().time().second)

# Print Start and End Of Time
print(datetime.time.min)
print(datetime.time.max)

# Print Specific Date
print(datetime.datetime(2000, 12, 13))

# calcule Time and Date

myBirthDay = datetime.datetime(2002, 5, 3)
dateNow = datetime.datetime.now()

print((dateNow - myBirthDay).days)

# ----------------------------------
# -- Date and Time => Format Date --
# ----------------------------------
# https://strftime.org/
# ----------------------------------
# datetime.datetime.strftime()
# ----------------------------------
# remember set time befor format its

# import datetime

# myBirthday = datetime.datetime(1982, 10, 25)

print(myBirthday.strftime("%d %B %Y"))
print(myBirthday.strftime("%d, %B, %Y"))
print(myBirthday.strftime("%d/%B/%Y"))
print(myBirthday.strftime("%d - %B - %Y"))
print(myBirthday.strftime("%B - %Y"))


----------------------------------------------------------------------------
--------------------------------- Exceptions Handling  ---------------------
----------------------------------------------------------------------------

# -----------------------------------
# -- Try | Except | Else | Finally --
# -----------------------------------
# Try     => Test The Code For Errors
# Except  => Handle The Errors
# ----------------------------
# Else    => If No Errors
# Finally => Run The Code
# ------------------------

try:
    age = int(input("name :"))

except SyntaxError:
    print("syntax Error")

except ZeroDivisionError:
    print("ZeroDivisionError Error")

except NameError:
    print("NameError Error")

except:
    print("Error Happen")

else:  # If Theres No Errors
    print("Not Error")
    
finally:  # Print From Finally Whatever Happens
    print("My Finally")


----------------------------------------------------------------------------
--------------------------------- SQL Lite  -------------------------------
----------------------------------------------------------------------------

# ------------------------
# -- Databases => Intro --
# ------------------------
# - Database Is A Place Where We Can Store Data
# - Database Organized Into Tables (Users, Categories)
# - Tables Has Columns (ID, Username, Password)
# - There's Many Types Of Databases (MongoDB, MySQL, SQLite)
# - SQL Stand For Structured Query Language
# - SQLite => Can Run in Memory or in A Single File
# - You Can Browse File With https://sqlitebrowser.org/
# - Data Inside Database Has Types (Text, Integer, Date)
# ------------------------------------------------------

# --------------------------------------------------------
# -- Databases => SQLite => Create Database And Connect --
# --------------------------------------------------------
# - Connect("name of data base create if not existe")
# - Execute("SQL Query")
# - Close
# --------------------------------------------------

# Import SQLite Module
import sqlite3

# Create Database And Connect
db = sqlite3.connect("app.db")

# Create The Tables and Fields
db.execute(
    "CREATE TABLE IF NOT EXISTS skills (name text, progress integer, user_id integer)")

# Close Database
db.close()

# ------------------------------------------------------
# -- Databases => SQLite => Insert Data Into Database --
# ------------------------------------------------------
# - cursor => All Operation in SQL Done By Cursor Not The Connection Itself
# - commit => Save All Changes
# ------------------------------------------------------
###################################
# use curser is the best practes :#
###################################
# import sqlite3

# db = sqlite3.connect("app.db")

# setting curser :
cr = db.cursor()

# create Table :
# cr.execute("CREATE TABLE IF NOT EXISTS User_Client (user_id, name)")

myNAme = ["amin", "hamid", "khalid"]

for k, name in enumerate(myNAme, 1):
    db.execute(f"INSERT INTO User_Client(user_id, name) VALUES({k},'{name}')")

# commit is to save change :
# db.commit()

# db.close()

# --------------------------------------------------------
# -- Databases => SQLite => Retrieve Data From Database --
# --------------------------------------------------------
# - fetchone => returns a single record or None if no more rows are available.
# - fetchall => fetches all the rows of a query result. It returns all the rows
#               as a list of tuples. An empty list is returned if there is no record to fetch.
# - fetchmany(size) =>
# ------------------------------------------------------

# afte creat db Connection and creat table and insert data :

# ---------------------------------------------------
# ------------  Training On Everything --------------
# ---------------------------------------------------

def get_all_Data():

    try:
        db = sqlite3.connect("app.db")
        cr = db.cursor()
        cr.execute("SELECT * FROM user")
        MyData = cr.fetchall()
        print(f"Data Base Has {len(MyData)} Rows")

        for k, v in MyData:
            print(f'Name : {v}, UserId : {k}')

    except sqlite3.Error as se:
        print(f"Connect is Field! , Erorr {se}")

    finally:
        if (db):
            db.close()
            print("Connection Is close ")


get_all_Data()

# ----------------------------------------------
# -- Databases => SQLite => Update and Delete --
# ----------------------------------------------

import sqlite3

db = sqlite3.connect("app.db")

cr = db.cursor()

# Update :
cr.execute("UPDATE user SET name ='Rajae' WHERE user_id = 1 ")
cr.execute("UPDATE user SET name = 'Amin' WHERE user_id = 2 ")
cr.execute("UPDATE user SET name ='Zineb' WHERE user_id = 3 ")

cr.execute("DELETE FROM user WHERE name = 'Zineb'")

cr.execute("SELECT * FROM user")

MyData = cr.fetchall()

print(MyData)

db.commit()

db.close()

# ---------------------------------------------------
# -------------------- Web Scraping -----------------
# ---------------------------------------------------
# ---------------------------------------------------
# - Control Browser With Selenium For Automated Testing
# - Download File From The Internet
# - Subtitle Download And Add On Your Movies [ Many Modules ]
# - Get Quotes From Websites
# - Get Gold and Currencies Rate
# - Get News From Websites
# - --------------------------------------------

 